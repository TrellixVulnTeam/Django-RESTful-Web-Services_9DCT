"""
Django settings for restful01 project.

Generated by 'django-admin startproject' using Django 3.0.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '^2o)5!ta500uqg0$6wio6$696@_=*szfags*0z(cj$o-1=0z5i'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    #Rest framework
    'rest_framework',
    #App drones
    'drones.apps.DronesConfig',
    #Filter
    'django_filters',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'restful01.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'restful01.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'drones',
        'USER': 'postgres',
        'PASSWORD':'qwerty123',
        'HOST': '127.0.0.1',
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
#Paginador 
#Es una buena práctica configurar un límite máximo para evitar generar respuestas con grandes cantidades de datos que puedan generar cargas importantes al servidor que ejecuta el Servicio Web RESTful.
#De esta manera, todas las vistas genéricas usarán la clase drones.custompagination.LimitOffsetPaginationWithUpperBound 
#Si el valor especificado para el parámetro de consulta límite es mayor que 8, se utiliza el valor máximo de 8, en lugar del valor que se indique en la solicitud

#rest_framework.filters.OrderingFilter: 
#Esta clase permite al cliente controlar cómo se ordenan los resultados con un único parámetro de consulta. Podemos especificar qué campos se pueden ordenar.

#django_filters.rest_framework.DjangoFilterBackend: 
#esta clase proporciona capacidades de filtrado de campos. Podemos especificar el conjunto de campos contra los que queremos poder filtrar, y el backend del filtro definido 
#en el paquete django-filter creará una nueva clase django_filters.rest_framework.FilterSet y la asociará a la vista basada en clases. También es posible crear nuestra 
#propia clase rest_framework.filters.FilterSet, con configuraciones más personalizadas, y escribir nuestro propio código para asociarlo con la vista basada en clases.

#rest_framework.filters.SearchFilter: 
#esta clase proporciona capacidades de búsqueda basadas en parámetros de consulta única, y su comportamiento se basa en la función de búsqueda del administrador de Django. 
#Podemos especificar el conjunto de campos que queremos incluir para la función de búsqueda y el cliente podrá filtrar elementos realizando consultas que busquen en estos 
#campos con una única consulta. Es útil cuando queremos hacer posible que una solicitud busque en varios campos con una sola consulta.

#BasicAuthentication: esta clase proporciona una autenticación básica HTTP con un nombre de usuario y una contraseña.

#SessionAuthentication: esta clase funciona con el marco de sesión de Django para la autenticación.

#TokenAuthentication: esta clase proporciona una autenticación simple basada en token. 
#La solicitud debe incluir el token generado para un usuario como el valor de la clave de encabezado HTTP de 
#autorización con la cadena 'Token' como prefijo del token.
REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS':  
    'drones.custompagination.LimitOffsetPaginationWithUpperBound',   
    'PAGE_SIZE': 4,
    'DEFAULT_FILTER_BACKENDS': (        
        'django_filters.rest_framework.DjangoFilterBackend',        
        'rest_framework.filters.OrderingFilter',      
        'rest_framework.filters.SearchFilter',     
        ),
    'DEFAULT_AUTHENTICATION_CLASSES': (        
        'rest_framework.authentication.BasicAuthentication',         
        'rest_framework.authentication.SessionAuthentication',         
        ) 
}

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
